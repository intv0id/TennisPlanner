@using Radzen.Blazor
@using TennisPlanner.App.Services
@using TennisPlanner.Core.Contracts.Location
@using System.Linq
@using TennisPlanner.Shared.Models

@inject ISearchFiltersService SearchFiltersService
@inject IUserConsentService UserConsentService
@inject NotificationService NotificationService

<div class="row">
    @if (UserConsentService.IsLocalStorageEnabled())
    {
            @if (IsProfileInEditMode)
            {
                <input @bind-value=SearchFiltersService.ProfileName placeholder="Nom du profil de recherche"/>
            }
            else
            {
                <p>@SearchFiltersService.ProfileName <span class="oi-pencil" @onclick=EditProfileName/></p>
        }

        if (savedProfiles != null && savedProfiles.Count() > 0)
        {
             <div class="dropdown-menu dropdown-menu-right">
                @foreach(var filter in savedProfiles)
                {
                    <a class="dropdown-item" @onclick="async () => await SearchFiltersService.TryLoadProfileFromLocalStorageAsync(filter.Id)">@filter.ProfileName</a>
                }
            </div>
        }
    }
    <div class="col-md-6">
        <RadzenFieldset Text="Heure">
			@foreach (var RangeHoursSelectorModel in SearchFiltersService.HourRangeList)
			{
                <RadzenCard>
                    <div class="col-sm-4">
                        <span>@(RangeHoursSelectorModel.HourRange.ElementAt(0))h</span>
                        <RadzenSlider 
                            Range="true" 
                            Min="0" 
                            Max="24" 
                            @bind-Value=@RangeHoursSelectorModel.HourRange 
                            TValue="IEnumerable<int>" 
                            Change=@(args => UpdateRangeSelector(args, RangeHoursSelectorModel)) 
                            Class="w-100" />
                        <span>@(RangeHoursSelectorModel.HourRange.ElementAt(1))h</span>
                    </div>
                    <div class="col-sm-2">
                        <a class="btn btn-link" @onclick="_ => SearchFiltersService.RemoveHourRange(RangeHoursSelectorModel)">
                            <span class="oi oi-minus"></span>
                        </a>
                    </div>
                </RadzenCard>
			}
            <div class="row">
                <a class="btn btn-link" @onclick="AddHourRangeSelector"><span class="oi oi-plus"></span></a>
            </div>
        </RadzenFieldset>
    </div>
    <div class="col-md-6">
        <RadzenFieldset Text="Addresse">
			@foreach (var addressModel in SearchFiltersService.AddressesList)
			{
                <RadzenCard>
                    <div class="col-sm-4">
                        <AddressSelector @bind-SelectedAddress=@addressModel.Value/>
                    </div>
                    <div class="col-sm-2">
                        <a class="btn btn-link" @onclick="_ => SearchFiltersService.RemovePlayerAddress(addressModel)">
                            <span class="oi oi-minus"></span>
                        </a>
                    </div>
                </RadzenCard>
			}

            @if(SearchFiltersService.AddressesList.All(x => x.Validated))
            {
                <div class="row">
                    <a class="btn btn-link" @onclick="AddPlayerAddress"><span class="oi oi-plus"></span></a>
                </div>
            }
        </RadzenFieldset>
    </div>

    @if(@UserConsentService.IsLocalStorageEnabled())
    {
        @if(ProfileCanBeSaved())
        {
            <button @onclick=SaveProfile>Sauvegarder</button>
        }
        else
        {
            <p>Complétez tous les champs pour pouvoir enregistrer ce profil.</p>
        }
        <p>Vos filtres seront appliqués à la recherche. La sauvegarde permet de réutiliser vos filtres ultérieurement.</p>
    }
</div>


@code {
    [Parameter]
    [EditorRequired]
    public SearchModel searchModel {get; set;}

    bool IsProfileInEditMode { get; set; }

    List<FiltersProfileDto> savedProfiles;

    protected override async Task OnInitializedAsync()
    {
        SearchFiltersService.AddHourRangeEvent += OnAddHourRangeEvent;
        SearchFiltersService.RemoveHourRangeEvent += OnRemoveHourRangeEvent;
        SearchFiltersService.AddPlayerAddressEvent += OnAddPlayerAddressEvent;
        SearchFiltersService.RemovePlayerAddressEvent += OnRemovePlayerAddressEvent;

        if (UserConsentService.IsLocalStorageEnabled())
        {
            if (string.IsNullOrEmpty(SearchFiltersService.ProfileName))
            {
                IsProfileInEditMode = true;
            }
            savedProfiles = await SearchFiltersService.ListSavedProfileIdsInLocalStorageAsync();
        }
    }

    private void AddHourRangeSelector()
    {
        SearchFiltersService.AddHourRange(new HourRangeSelectorModel()
            {
                HourRange = new List<int> { 0, 24 },
            });
    }

    private void AddPlayerAddress()
    {
        SearchFiltersService.AddPlayerAddress(new AddressModel());
    }

    private void UpdateRangeSelector(IEnumerable<int> hourRange, HourRangeSelectorModel hrModel)
    {
        hrModel.HourRange = hourRange;
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private void OnAddPlayerAddressEvent(object? sender, AddressModel address)
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
    private void OnRemovePlayerAddressEvent(object? sender, AddressModel address)
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private void OnAddHourRangeEvent(object? sender, HourRangeSelectorModel hourRangeSelectorModel)
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private void OnRemoveHourRangeEvent(object? sender, HourRangeSelectorModel hourRangeSelectorModel)
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private void EditProfileName()
    {
        IsProfileInEditMode = true;
    }

    private bool ProfileCanBeSaved()
    {
        return !string.IsNullOrEmpty(SearchFiltersService.ProfileName)
            && (SearchFiltersService.AddressesList.Count() > 0 || SearchFiltersService.HourRangeList.Count() > 0);
    }

    private async Task SaveProfile()
    {
        if (await SearchFiltersService.TrySaveProfileInLocalStorageAsync())
        {
            IsProfileInEditMode = false;
            NotificationService.Notify(
                severity: NotificationSeverity.Success, 
                summary: "Sauvegarde effectuée", 
                detail: "Votre profil de recherche a bien été sauvegardé");
        }
        else
        {
            NotificationService.Notify(
                severity: NotificationSeverity.Error,
                summary: "Echec de sauvegarde",
                detail: "Votre profil de recherche n'a pas pû être sauvegardé");
        }
    }
}
